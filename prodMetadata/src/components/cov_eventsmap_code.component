<apex:component >

	<apex:attribute name="mapHeight" description="Height of map section in pixels" type="String" />
	<apex:attribute name="searchBoxPosition" description="Position of search box on map - default TOP-LEFT" type="String" />
	<apex:attribute name="searchBoxFontSize" description="Font-size of search box on map - default 15px" type="String" />


					 	<style type="text/css">

							.vt-map-or { font-size: 18px; color: rgba(255, 255, 255, 0.4); margin-right: 20px; }

							/*.vt-map-button { padding: 2px 16px 0; line-height: 40px; font-size: 17px; color: #343432; -webkit-transition: background-color 150ms ease-out; transition: background-color 150ms ease-out; }
							.vt-map-button:hover { color: #111111; background-color: rgba(220, 244, 40, 0.9); }*/

							#vt-map-canvas { width: 100%; height: {!mapHeight}px; }
							#vt-map-canvas #pac-input { background-color: #fff; padding: 0 8px; width: 12em; height: 30px; font-size: {!nullvalue(searchBoxFontSize, '15px')}; text-overflow: ellipsis; margin-top: 30px; border: 1px solid transparent; border-radius: 2px; box-sizing: border-box; -moz-box-sizing: border-box; outline: none; box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3); }

							.vt-map-iw-link, .vt-map-iw-link:visited { color: #94ae2c; }
							.vt-map-iw-link:hover, .vt-map-iw-link:active { color: #708c2f; }
							.vt-map-iw-link .fa { font-size: .85em; }

						</style>


						<!-- Begin Map Section -->
						<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCnil3KH9IktrA0Qa9d4gQK7V4LO3HWsOU&libraries=places"></script>
						<!-- <script type="text/javascript" src="https://iava.org/wp-content/themes/iava_theme/js/vettogether.js"></script> -->
						<script type="text/javascript">

					j$ = jQuery.noConflict();

					(function(j$) {
						function initialize() {
							 // Get XML feed
							 j$.ajax({
								 type: "GET",
								 url: "cov_event_marker_feed",
								 dataType: "xml",
								 success: function(xml) {
						
									 var myLatlng = new google.maps.LatLng(39.8280678, -98.5797874);
									 
									 var initialZoom = 4; // Set default as 4 for 768px to 1199px media queries
									 // var wWidth = j$(window).width();
									 var wWidth = j$('#vt-map-canvas').width();
									 if (wWidth >= 1200) {
										 initialZoom = 5;
									 } else if (wWidth < 768) {
										 initialZoom = 3;
									 }
						
									 var mapOptions = {
										 center: myLatlng,
										 zoom: initialZoom,
										 scrollwheel: false
									 };
						
									 // Create the actual map object
									 var map = new google.maps.Map(document.getElementById('vt-map-canvas'),
										 mapOptions);
						
									 // This gets used by the search box
									 var markers = [];
						
									 // This info window is used by the map markers when they're
									 // clicked
									 var infoWindow = new google.maps.InfoWindow({
											 content: ''
									 });
						
									 // This object will hold the data info window data
									 iwData = {};
									 
									 // Create marker object
									 var markerImage = {
										 url: 'https://iava.org/wp-content/themes/iava_theme/images/vt-map-flag@2x.png',
										 size: new google.maps.Size(33, 42),
										 origin: new google.maps.Point(0,0),
										 anchor: new google.maps.Point(2, 42),
										 scaledSize: new google.maps.Size(33, 42)
									 };
						
									 markerCounter = 0;
									 // Loop through each item found in the XML
									 j$(xml).find('marker').each(function() {
						
										 markerCounter++;
						
										 var markerPosition = new google.maps.LatLng(
											 j$(this).attr('lat'),
											 j$(this).attr('lng')
										 );
						
										 newKey = "i" + markerCounter;
										 iwData[newKey] = {};
						
										 iwData[newKey]["name"] = j$(this).attr('name');
										 iwData[newKey]["date"] = j$(this).attr('date');
										 iwData[newKey]["address1"] = j$(this).attr('address1');
										 iwData[newKey]["address2"] = j$(this).attr('address2');
										 iwData[newKey]["city"] = j$(this).attr('city');
										 iwData[newKey]["postcode"] = j$(this).attr('postcode');
										 iwData[newKey]["link"] = j$(this).attr('link');
						
										 var marker = new google.maps.Marker({
											 position: markerPosition,
											 map: map,
											 title: newKey, //iwData[newKey]["name"], // For now set to newKey as way of referencing this marker's content for infoWindow
											 animation: google.maps.Animation.DROP,
											 icon: markerImage
										 });
						
										 google.maps.event.addListener(marker, 'click', function() {
						
											 // Get the marker's title. This is the key used
											 // to find its data in the data object
											 mTitle = this.getTitle();
											 mData = iwData[mTitle];
						
											 // Build the content string
											 var contentString = '<div class="vt-map-iw">';
											 contentString += '<p><span class="vt-map-iw-title">' + mData["name"] + '</span><br />';
											 contentString += mData["date"];
											 contentString += '</p>';
											 contentString += '<p>';
											 contentString += mData["address1"] + '<br />';
						
											 if (mData["address2"] != '') {
													 contentString += mData["address2"] + '<br />';
											 }
						
											 contentString += mData["city"] + ' ' + mData["postcode"] + '<br />';
						
											 contentString += '</p>';
						
											 contentString += '<p>';
											 contentString += '<a target="_blank" href="' + mData["link"] + '" class="vt-map-iw-link">More information <i class="fa fa-external-link"></i></a>';
											 contentString += '</p>';
						
											 contentString += '</div>';
						
											 infoWindow.setContent(contentString);
											 infoWindow.open(map, this);
										 });
									 }); // End 'each' through markers
						
									 // Create the search box and link it to the UI element.
									 var input = /** @type {HTMLInputElement} */ (
										 document.getElementById('pac-input'));
									 map.controls[google.maps.ControlPosition.{!nullvalue(searchBoxPosition, 'TOP_LEFT')}].push(input);
						
									 var searchBox = new google.maps.places.SearchBox(
										 /** @type {HTMLInputElement} */
										 (input));
						
									 // [START region_getplaces]
									 // Listen for the event fired when the user selects an item from the
									 // pick list. Retrieve the matching places for that item.
									 google.maps.event.addListener(searchBox, 'places_changed', function() {
										 var places = searchBox.getPlaces();
						
										 if (places.length == 0) {
											 return;
										 }
						
										 // Looks like this just clears the map of any markers from a previous search
										 for (var i = 0, marker; marker = markers[i]; i++) {
											 marker.setMap(null);
										 }
						
										 // For each place, get the icon, place name, and location.
										 markers = [];
										 var bounds = new google.maps.LatLngBounds();
						
										 // Make icon objects for each place found
										 for (var i = 0, place; place = places[i]; i++) {
											 var image = {
												 url: place.icon,
												 size: new google.maps.Size(71, 71),
												 origin: new google.maps.Point(0, 0),
												 anchor: new google.maps.Point(17, 34),
												 scaledSize: new google.maps.Size(25, 25)
											 };
						
											 // Create a marker for each place.
											 var marker = new google.maps.Marker({
												 map: map,
												 icon: image,
												 title: place.name,
												 position: place.geometry.location
											 });
						
											 markers.push(marker);
						
											 bounds.extend(place.geometry.location);
										 }
						
										 map.fitBounds(bounds);
						
										 // If just one place was found
										 if (markers.length == 1) {
											 // When there's just one item, the map's way too zoomed
											 // in, so zoom out a few levels
											 currentZoom = map.getZoom();
											 map.setZoom(currentZoom - 7);
										 }
									 });
									 // [END region_getplaces]
						
									 // Bias the SearchBox results towards places that are within the bounds of the
									 // current map's viewport.
									 google.maps.event.addListener(map, 'bounds_changed', function() {
										 var bounds = map.getBounds();
										 searchBox.setBounds(bounds);
									 });
								 } // End success function
							 }); // End j$.ajax
						}
						
						google.maps.event.addDomListener(window, 'load', initialize);
						
					}(jQuery));

						</script>


</apex:component>